diff --git a/js/src/vm/GlobalObject.h b/js/src/vm/GlobalObject.h
--- a/js/src/vm/GlobalObject.h
+++ b/js/src/vm/GlobalObject.h
@@ -88,7 +88,6 @@
     ASYNC_GENERATOR_PROTO,
     MAP_ITERATOR_PROTO,
     SET_ITERATOR_PROTO,
-    COLLATOR_PROTO,
     NUMBER_FORMAT,
     NUMBER_FORMAT_PROTO,
     DATE_TIME_FORMAT,
@@ -504,7 +503,10 @@
 #if ENABLE_INTL_API
   static JSObject* getOrCreateCollatorPrototype(JSContext* cx,
                                                 Handle<GlobalObject*> global) {
-    return getOrCreateObject(cx, global, COLLATOR_PROTO, initIntlObject);
+    if (!ensureConstructor(cx, global, JSProto_Collator)) {
+      return nullptr;
+    }
+    return &global->getPrototype(JSProto_Collator).toObject();
   }
 
   static JSFunction* getOrCreateNumberFormatConstructor(
diff --git a/js/src/vm/GlobalObject.cpp b/js/src/vm/GlobalObject.cpp
--- a/js/src/vm/GlobalObject.cpp
+++ b/js/src/vm/GlobalObject.cpp
@@ -14,6 +14,7 @@
 #include "builtin/BigInt.h"
 #include "builtin/DataViewObject.h"
 #include "builtin/Eval.h"
+#include "builtin/intl/Collator.h"
 #include "builtin/MapObject.h"
 #include "builtin/ModuleObject.h"
 #include "builtin/Object.h"
diff --git a/js/src/vm/CommonPropertyNames.h b/js/src/vm/CommonPropertyNames.h
--- a/js/src/vm/CommonPropertyNames.h
+++ b/js/src/vm/CommonPropertyNames.h
@@ -77,7 +77,6 @@
   MACRO(catch, catch_, "catch")                                                \
   MACRO(class, class_, "class")                                                \
   MACRO(close, close, "close")                                                 \
-  MACRO(Collator, Collator, "Collator")                                        \
   MACRO(collections, collections, "collections")                               \
   MACRO(columnNumber, columnNumber, "columnNumber")                            \
   MACRO(comma, comma, ",")                                                     \
diff --git a/js/src/builtin/intl/IntlObject.cpp b/js/src/builtin/intl/IntlObject.cpp
--- a/js/src/builtin/intl/IntlObject.cpp
+++ b/js/src/builtin/intl/IntlObject.cpp
@@ -545,8 +545,7 @@
 
   // Add the constructor properties, computing and returning the relevant
   // prototype objects needed below.
-  RootedObject collatorProto(cx, CreateCollatorPrototype(cx, intl, global));
-  if (!collatorProto) {
+  if (!CreateCollator(cx, intl)) {
     return false;
   }
   RootedObject dateTimeFormatProto(cx), dateTimeFormat(cx);
@@ -588,7 +587,6 @@
   // |String.prototype| we have |JSProto_*| that enables
   // |getPrototype(JSProto_*)|, but that has global-object-property-related
   // baggage we don't need or want, so we use one-off reserved slots.
-  global->setReservedSlot(COLLATOR_PROTO, ObjectValue(*collatorProto));
   global->setReservedSlot(DATE_TIME_FORMAT, ObjectValue(*dateTimeFormat));
   global->setReservedSlot(DATE_TIME_FORMAT_PROTO,
                           ObjectValue(*dateTimeFormatProto));
diff --git a/js/src/builtin/intl/Collator.h b/js/src/builtin/intl/Collator.h
--- a/js/src/builtin/intl/Collator.h
+++ b/js/src/builtin/intl/Collator.h
@@ -19,13 +19,12 @@
 
 namespace js {
 
-class GlobalObject;
-
 /******************** Collator ********************/
 
 class CollatorObject : public NativeObject {
  public:
   static const JSClass class_;
+  static const JSClass& protoClass_;
 
   static constexpr uint32_t INTERNALS_SLOT = 0;
   static constexpr uint32_t UCOLLATOR_SLOT = 1;
@@ -49,13 +48,12 @@
 
  private:
   static const JSClassOps classOps_;
+  static const ClassSpec classSpec_;
 
   static void finalize(JSFreeOp* fop, JSObject* obj);
 };
 
-extern JSObject* CreateCollatorPrototype(JSContext* cx,
-                                         JS::Handle<JSObject*> Intl,
-                                         JS::Handle<GlobalObject*> global);
+extern bool CreateCollator(JSContext* cx, JS::Handle<JSObject*> Intl);
 
 /**
  * Returns a new instance of the standard built-in Collator constructor.
diff --git a/js/src/builtin/intl/Collator.cpp b/js/src/builtin/intl/Collator.cpp
--- a/js/src/builtin/intl/Collator.cpp
+++ b/js/src/builtin/intl/Collator.cpp
@@ -54,7 +54,9 @@
     js_Object_str,
     JSCLASS_HAS_RESERVED_SLOTS(CollatorObject::SLOT_COUNT) |
         JSCLASS_FOREGROUND_FINALIZE,
-    &CollatorObject::classOps_};
+    &CollatorObject::classOps_, &CollatorObject::classSpec_};
+
+const JSClass& CollatorObject::protoClass_ = PlainObject::class_;
 
 static bool collator_toSource(JSContext* cx, unsigned argc, Value* vp) {
   CallArgs args = CallArgsFromVp(argc, vp);
@@ -75,6 +77,18 @@
     JS_SELF_HOSTED_GET("compare", "$Intl_Collator_compare_get", 0),
     JS_STRING_SYM_PS(toStringTag, "Object", JSPROP_READONLY), JS_PS_END};
 
+static bool Collator(JSContext* cx, unsigned argc, Value* vp);
+
+const ClassSpec CollatorObject::classSpec_ = {
+    GenericCreateConstructor<Collator, 0, gc::AllocKind::FUNCTION>,
+    GenericCreatePrototype<CollatorObject>,
+    collator_static_methods,
+    nullptr,
+    collator_methods,
+    collator_properties,
+    nullptr,
+    ClassSpec::DontDefineConstructor};
+
 /**
  * 10.1.2 Intl.Collator([ locales [, options]])
  *
@@ -85,7 +99,7 @@
 
   // Steps 2-5 (Inlined 9.1.14, OrdinaryCreateFromConstructor).
   RootedObject proto(cx);
-  if (!GetPrototypeFromBuiltinConstructor(cx, args, JSProto_Null, &proto)) {
+  if (!GetPrototypeFromBuiltinConstructor(cx, args, JSProto_Collator, &proto)) {
     return false;
   }
 
@@ -136,46 +150,15 @@
   }
 }
 
-JSObject* js::CreateCollatorPrototype(JSContext* cx, HandleObject Intl,
-                                      Handle<GlobalObject*> global) {
-  RootedFunction ctor(cx, GlobalObject::createConstructor(
-                              cx, &Collator, cx->names().Collator, 0));
+bool js::CreateCollator(JSContext* cx, HandleObject Intl) {
+  JSObject* ctor = GlobalObject::getOrCreateConstructor(cx, JSProto_Collator);
   if (!ctor) {
-    return nullptr;
-  }
-
-  RootedObject proto(
-      cx, GlobalObject::createBlankPrototype<PlainObject>(cx, global));
-  if (!proto) {
-    return nullptr;
-  }
-
-  if (!LinkConstructorAndPrototype(cx, ctor, proto)) {
-    return nullptr;
-  }
-
-  // 10.2.2
-  if (!JS_DefineFunctions(cx, ctor, collator_static_methods)) {
-    return nullptr;
-  }
-
-  // 10.3.5
-  if (!JS_DefineFunctions(cx, proto, collator_methods)) {
-    return nullptr;
-  }
-
-  // 10.3.2 and 10.3.3
-  if (!JS_DefineProperties(cx, proto, collator_properties)) {
-    return nullptr;
+    return false;
   }
 
   // 8.1
   RootedValue ctorValue(cx, ObjectValue(*ctor));
-  if (!DefineDataProperty(cx, Intl, cx->names().Collator, ctorValue, 0)) {
-    return nullptr;
-  }
-
-  return proto;
+  return DefineDataProperty(cx, Intl, cx->names().Collator, ctorValue, 0);
 }
 
 bool js::intl_Collator_availableLocales(JSContext* cx, unsigned argc,
diff --git a/js/public/ProtoKey.h b/js/public/ProtoKey.h
--- a/js/public/ProtoKey.h
+++ b/js/public/ProtoKey.h
@@ -129,7 +129,8 @@
   IMAGINARY(WasmInstance, dummy, dummy)                                      \
   IMAGINARY(WasmMemory, dummy, dummy)                                        \
   IMAGINARY(WasmTable, dummy, dummy)                                         \
-  IMAGINARY(WasmGlobal, dummy, dummy)
+  IMAGINARY(WasmGlobal, dummy, dummy)                                        \
+  REAL_IF_INTL(Collator, InitViaClassSpec, OCLASP(Collator))
 
 #define JS_FOR_PROTOTYPES(REAL, IMAGINARY)                      \
   JS_FOR_PROTOTYPES_(REAL, IMAGINARY, IF_INTL(REAL, IMAGINARY), \
diff --git a/js/public/Class.h b/js/public/Class.h
--- a/js/public/Class.h
+++ b/js/public/Class.h
@@ -750,7 +750,7 @@
 // application.
 static const uint32_t JSCLASS_GLOBAL_APPLICATION_SLOTS = 5;
 static const uint32_t JSCLASS_GLOBAL_SLOT_COUNT =
-    JSCLASS_GLOBAL_APPLICATION_SLOTS + JSProto_LIMIT * 2 + 40;
+    JSCLASS_GLOBAL_APPLICATION_SLOTS + JSProto_LIMIT * 2 + 39;
 
 #define JSCLASS_GLOBAL_FLAGS_WITH_SLOTS(n) \
   (JSCLASS_IS_GLOBAL |                     \


