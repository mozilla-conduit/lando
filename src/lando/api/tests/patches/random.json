[
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/vm/GlobalObject.h",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 0,
                "corpus": "     ASYNC_GENERATOR_PROTO,\n     MAP_ITERATOR_PROTO,\n     SET_ITERATOR_PROTO,\n-    COLLATOR_PROTO,\n     NUMBER_FORMAT,\n     NUMBER_FORMAT_PROTO,\n     DATE_TIME_FORMAT,",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 6,
                "newOffset": 88,
                "oldLength": 7,
                "oldOffset": 88
            },
            {
                "addLines": 4,
                "corpus": " #if ENABLE_INTL_API\n   static JSObject* getOrCreateCollatorPrototype(JSContext* cx,\n                                                 Handle<GlobalObject*> global) {\n-    return getOrCreateObject(cx, global, COLLATOR_PROTO, initIntlObject);\n+    if (!ensureConstructor(cx, global, JSProto_Collator)) {\n+      return nullptr;\n+    }\n+    return &global->getPrototype(JSProto_Collator).toObject();\n   }\n \n   static JSFunction* getOrCreateNumberFormatConstructor(",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 10,
                "newOffset": 503,
                "oldLength": 7,
                "oldOffset": 504
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/vm/GlobalObject.h",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/vm/GlobalObject.cpp",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 1,
                "corpus": " #include \"builtin/BigInt.h\"\n #include \"builtin/DataViewObject.h\"\n #include \"builtin/Eval.h\"\n+#include \"builtin/intl/Collator.h\"\n #include \"builtin/MapObject.h\"\n #include \"builtin/ModuleObject.h\"\n #include \"builtin/Object.h\"",
                "delLines": 0,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 7,
                "newOffset": 14,
                "oldLength": 6,
                "oldOffset": 14
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/vm/GlobalObject.cpp",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/vm/CommonPropertyNames.h",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 0,
                "corpus": "   MACRO(catch, catch_, \"catch\")                                                \\\n   MACRO(class, class_, \"class\")                                                \\\n   MACRO(close, close, \"close\")                                                 \\\n-  MACRO(Collator, Collator, \"Collator\")                                        \\\n   MACRO(collections, collections, \"collections\")                               \\\n   MACRO(columnNumber, columnNumber, \"columnNumber\")                            \\\n   MACRO(comma, comma, \",\")                                                     \\",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 6,
                "newOffset": 77,
                "oldLength": 7,
                "oldOffset": 77
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/vm/CommonPropertyNames.h",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/builtin/intl/IntlObject.cpp",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 1,
                "corpus": " \n   // Add the constructor properties, computing and returning the relevant\n   // prototype objects needed below.\n-  RootedObject collatorProto(cx, CreateCollatorPrototype(cx, intl, global));\n-  if (!collatorProto) {\n+  if (!CreateCollator(cx, intl)) {\n     return false;\n   }\n   RootedObject dateTimeFormatProto(cx), dateTimeFormat(cx);",
                "delLines": 2,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 7,
                "newOffset": 545,
                "oldLength": 8,
                "oldOffset": 545
            },
            {
                "addLines": 0,
                "corpus": "   // |String.prototype| we have |JSProto_*| that enables\n   // |getPrototype(JSProto_*)|, but that has global-object-property-related\n   // baggage we don't need or want, so we use one-off reserved slots.\n-  global->setReservedSlot(COLLATOR_PROTO, ObjectValue(*collatorProto));\n   global->setReservedSlot(DATE_TIME_FORMAT, ObjectValue(*dateTimeFormat));\n   global->setReservedSlot(DATE_TIME_FORMAT_PROTO,\n                           ObjectValue(*dateTimeFormatProto));",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 6,
                "newOffset": 587,
                "oldLength": 7,
                "oldOffset": 588
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/builtin/intl/IntlObject.cpp",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/builtin/intl/Collator.h",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 1,
                "corpus": " \n namespace js {\n \n-class GlobalObject;\n-\n /******************** Collator ********************/\n \n class CollatorObject : public NativeObject {\n  public:\n   static const JSClass class_;\n+  static const JSClass& protoClass_;\n \n   static constexpr uint32_t INTERNALS_SLOT = 0;\n   static constexpr uint32_t UCOLLATOR_SLOT = 1;",
                "delLines": 2,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 12,
                "newOffset": 19,
                "oldLength": 13,
                "oldOffset": 19
            },
            {
                "addLines": 2,
                "corpus": " \n  private:\n   static const JSClassOps classOps_;\n+  static const ClassSpec classSpec_;\n \n   static void finalize(JSFreeOp* fop, JSObject* obj);\n };\n \n-extern JSObject* CreateCollatorPrototype(JSContext* cx,\n-                                         JS::Handle<JSObject*> Intl,\n-                                         JS::Handle<GlobalObject*> global);\n+extern bool CreateCollator(JSContext* cx, JS::Handle<JSObject*> Intl);\n \n /**\n  * Returns a new instance of the standard built-in Collator constructor.",
                "delLines": 3,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 12,
                "newOffset": 48,
                "oldLength": 13,
                "oldOffset": 49
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/builtin/intl/Collator.h",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/src/builtin/intl/Collator.cpp",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 3,
                "corpus": "     js_Object_str,\n     JSCLASS_HAS_RESERVED_SLOTS(CollatorObject::SLOT_COUNT) |\n         JSCLASS_FOREGROUND_FINALIZE,\n-    &CollatorObject::classOps_};\n+    &CollatorObject::classOps_, &CollatorObject::classSpec_};\n+\n+const JSClass& CollatorObject::protoClass_ = PlainObject::class_;\n \n static bool collator_toSource(JSContext* cx, unsigned argc, Value* vp) {\n   CallArgs args = CallArgsFromVp(argc, vp);",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 9,
                "newOffset": 54,
                "oldLength": 7,
                "oldOffset": 54
            },
            {
                "addLines": 12,
                "corpus": "     JS_SELF_HOSTED_GET(\"compare\", \"$Intl_Collator_compare_get\", 0),\n     JS_STRING_SYM_PS(toStringTag, \"Object\", JSPROP_READONLY), JS_PS_END};\n \n+static bool Collator(JSContext* cx, unsigned argc, Value* vp);\n+\n+const ClassSpec CollatorObject::classSpec_ = {\n+    GenericCreateConstructor<Collator, 0, gc::AllocKind::FUNCTION>,\n+    GenericCreatePrototype<CollatorObject>,\n+    collator_static_methods,\n+    nullptr,\n+    collator_methods,\n+    collator_properties,\n+    nullptr,\n+    ClassSpec::DontDefineConstructor};\n+\n /**\n  * 10.1.2 Intl.Collator([ locales [, options]])\n  *",
                "delLines": 0,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 18,
                "newOffset": 77,
                "oldLength": 6,
                "oldOffset": 75
            },
            {
                "addLines": 1,
                "corpus": " \n   // Steps 2-5 (Inlined 9.1.14, OrdinaryCreateFromConstructor).\n   RootedObject proto(cx);\n-  if (!GetPrototypeFromBuiltinConstructor(cx, args, JSProto_Null, &proto)) {\n+  if (!GetPrototypeFromBuiltinConstructor(cx, args, JSProto_Collator, &proto)) {\n     return false;\n   }\n ",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 7,
                "newOffset": 99,
                "oldLength": 7,
                "oldOffset": 85
            },
            {
                "addLines": 4,
                "corpus": "   }\n }\n \n-JSObject* js::CreateCollatorPrototype(JSContext* cx, HandleObject Intl,\n-                                      Handle<GlobalObject*> global) {\n-  RootedFunction ctor(cx, GlobalObject::createConstructor(\n-                              cx, &Collator, cx->names().Collator, 0));\n+bool js::CreateCollator(JSContext* cx, HandleObject Intl) {\n+  JSObject* ctor = GlobalObject::getOrCreateConstructor(cx, JSProto_Collator);\n   if (!ctor) {\n-    return nullptr;\n-  }\n-\n-  RootedObject proto(\n-      cx, GlobalObject::createBlankPrototype<PlainObject>(cx, global));\n-  if (!proto) {\n-    return nullptr;\n-  }\n-\n-  if (!LinkConstructorAndPrototype(cx, ctor, proto)) {\n-    return nullptr;\n-  }\n-\n-  // 10.2.2\n-  if (!JS_DefineFunctions(cx, ctor, collator_static_methods)) {\n-    return nullptr;\n-  }\n-\n-  // 10.3.5\n-  if (!JS_DefineFunctions(cx, proto, collator_methods)) {\n-    return nullptr;\n-  }\n-\n-  // 10.3.2 and 10.3.3\n-  if (!JS_DefineProperties(cx, proto, collator_properties)) {\n-    return nullptr;\n+    return false;\n   }\n \n   // 8.1\n   RootedValue ctorValue(cx, ObjectValue(*ctor));\n-  if (!DefineDataProperty(cx, Intl, cx->names().Collator, ctorValue, 0)) {\n-    return nullptr;\n-  }\n-\n-  return proto;\n+  return DefineDataProperty(cx, Intl, cx->names().Collator, ctorValue, 0);\n }\n \n bool js::intl_Collator_availableLocales(JSContext* cx, unsigned argc,",
                "delLines": 35,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 15,
                "newOffset": 150,
                "oldLength": 46,
                "oldOffset": 136
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/src/builtin/intl/Collator.cpp",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/public/ProtoKey.h",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 2,
                "corpus": "   IMAGINARY(WasmInstance, dummy, dummy)                                      \\\n   IMAGINARY(WasmMemory, dummy, dummy)                                        \\\n   IMAGINARY(WasmTable, dummy, dummy)                                         \\\n-  IMAGINARY(WasmGlobal, dummy, dummy)\n+  IMAGINARY(WasmGlobal, dummy, dummy)                                        \\\n+  REAL_IF_INTL(Collator, InitViaClassSpec, OCLASP(Collator))\n \n #define JS_FOR_PROTOTYPES(REAL, IMAGINARY)                      \\\n   JS_FOR_PROTOTYPES_(REAL, IMAGINARY, IF_INTL(REAL, IMAGINARY), \\",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 8,
                "newOffset": 129,
                "oldLength": 7,
                "oldOffset": 129
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/public/ProtoKey.h",
        "oldProperties": {},
        "type": 2
    },
    {
        "awayPaths": [],
        "commitHash": "deadbeef123",
        "currentPath": "js/public/Class.h",
        "fileType": 1,
        "hunks": [
            {
                "addLines": 1,
                "corpus": " // application.\n static const uint32_t JSCLASS_GLOBAL_APPLICATION_SLOTS = 5;\n static const uint32_t JSCLASS_GLOBAL_SLOT_COUNT =\n-    JSCLASS_GLOBAL_APPLICATION_SLOTS + JSProto_LIMIT * 2 + 40;\n+    JSCLASS_GLOBAL_APPLICATION_SLOTS + JSProto_LIMIT * 2 + 39;\n \n #define JSCLASS_GLOBAL_FLAGS_WITH_SLOTS(n) \\\n   (JSCLASS_IS_GLOBAL |                     \\",
                "delLines": 1,
                "isMissingNewNewline": false,
                "isMissingOldNewline": false,
                "newLength": 7,
                "newOffset": 750,
                "oldLength": 7,
                "oldOffset": 750
            }
        ],
        "metadata": {},
        "newProperties": {},
        "oldPath": "js/public/Class.h",
        "oldProperties": {},
        "type": 2
    }
]